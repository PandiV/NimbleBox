{"version":3,"sources":["assets/img/loader.gif","components/Loader/index.js","routes/route.config.js","routes/index.js","serviceWorker.js","index.js"],"names":["module","exports","Loader","className","src","LoaderImage","alt","name","path","component","lazy","exact","authentication","default","authed","document","cookie","split","some","data","includes","NimbleBoxRoutes","fallback","routes","map","route","i","key","render","props","to","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,oC,+MCa5BC,EARA,WACb,OACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKC,IAAaC,IAAI,aCDlB,GACb,CACEC,KAAM,QACNC,KAAM,SACNC,UARUC,gBAAK,kBAAM,gCASrBC,OAAO,EACPC,gBAAgB,GAElB,CACEL,KAAM,SACNC,KAAM,UACNC,UAdWC,gBAAK,kBAAM,sDAetBC,OAAO,EACPC,gBAAgB,GAElB,CACEL,KAAM,YACNC,KAAM,aACNC,UApBcC,gBAAK,kBAAM,sDAqBzBC,OAAO,EACPC,gBAAgB,GAElB,CACEL,KAAM,UACNC,KAAM,CAAC,IAAK,eACZK,SAAS,ICnBPC,EAAS,WAIb,OAHcC,SAASC,OACpBC,MAAM,KACNC,MAAK,SAACC,GAAD,OAAUA,EAAKC,SAAS,iBAiCnBC,EA7BS,kBACtB,kBAAC,IAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACGC,EAAOC,KAAI,SAACC,EAAOC,GAAR,OACV,kBAAC,IAAD,CACEC,IAAKF,EAAME,KAAOD,EAClBlB,KAAMiB,EAAMjB,KACZG,MAAOc,EAAMd,MACbiB,OAAQ,SAACC,GACP,GAAIJ,EAAMb,eAAgB,CACxB,GAAIE,IACF,OAAO,kBAACW,EAAMhB,UAAP,iBAAqBoB,EAArB,CAA4BN,OAAQE,EAAMF,UAEnD,IAAKT,IAAU,OAAO,kBAAC,IAAD,CAAUgB,GAAG,eAC9B,KAAIL,EAAMZ,QAIf,OAAO,kBAACY,EAAMhB,UAAP,iBAAqBoB,EAArB,CAA4BN,OAAQE,EAAMF,UAHjD,GAAIT,IAAU,OAAO,kBAAC,IAAD,CAAUgB,GAAG,eAClC,IAAKhB,IAAU,OAAO,kBAAC,IAAD,CAAUgB,GAAG,sBCzB/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCNNC,IAASR,OACP,kBAAC,IAAMS,WAAP,KACE,kBAAC,EAAD,OAEFtB,SAASuB,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9bf30fb7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.83dde36c.gif\";","import React from \"react\";\n\n//Import Loader Image\nimport LoaderImage from \"../../assets/img/loader.gif\";\n\nconst Loader = () => {\n  return (\n    <div className=\"loader\">\n      <img src={LoaderImage} alt=\"loader\" />\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { lazy } from \"react\";\n\n//Import Pages\nconst LogIn = lazy(() => import(\"../pages/LogIn\"));\nconst SignIn = lazy(() => import(\"../pages/SignIn\"));\nconst Dashboard = lazy(() => import(\"../pages/Dashboard\"));\n\nexport default [\n  {\n    name: \"login\",\n    path: \"/login\",\n    component: LogIn,\n    exact: true,\n    authentication: false,\n  },\n  {\n    name: \"signin\",\n    path: \"/signin\",\n    component: SignIn,\n    exact: true,\n    authentication: false,\n  },\n  {\n    name: \"dashboard\",\n    path: \"/dashboard\",\n    component: Dashboard,\n    exact: true,\n    authentication: true,\n  },\n  {\n    name: \"default\",\n    path: [\"/\", \"/index.html\"],\n    default: true,\n  },\n];\n","import React, { Suspense } from \"react\";\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  Redirect,\n} from \"react-router-dom\";\n\n//components\nimport Loader from \"../components/Loader\";\n\nimport routes from \"./route.config\";\n\nconst authed = () => {\n  const value = document.cookie\n    .split(\";\")\n    .some((data) => data.includes(\"userToken\"));\n  return value;\n};\n\nconst NimbleBoxRoutes = () => (\n  <Router>\n    <Suspense fallback={<Loader />}>\n      <Switch>\n        {routes.map((route, i) => (\n          <Route\n            key={route.key || i}\n            path={route.path}\n            exact={route.exact}\n            render={(props) => {\n              if (route.authentication) {\n                if (authed()) {\n                  return <route.component {...props} routes={route.routes} />;\n                }\n                if (!authed()) return <Redirect to=\"/login\" />;\n              } else if (route.default) {\n                if (authed()) return <Redirect to=\"/dashboard\" />;\n                if (!authed()) return <Redirect to=\"/login\" />;\n              } else {\n                return <route.component {...props} routes={route.routes} />;\n              }\n            }}\n          />\n        ))}\n      </Switch>\n    </Suspense>\n  </Router>\n);\n\nexport default NimbleBoxRoutes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport NimbleBoxRoutes from \"./routes\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n//Import CSS\nimport \"./assets/css/vendor/bootstrap.min.css\";\n//Import Font CSS\nimport \"./assets/css/font/font-awesome.css\";\n//Import Style CSS\nimport \"./assets/scss/style.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <NimbleBoxRoutes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}